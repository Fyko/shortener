schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

scalar bigint

# expression to compare columns of type bigint. All fields are combined with logical 'AND'.
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

# mutation root
type mutation_root {
  # delete data from the table: "urls"
  delete_urls(
    # filter the rows which have to be deleted
    where: urls_bool_exp!
  ): urls_mutation_response

  # delete single row from the table: "urls"
  delete_urls_by_pk(id: bigint!): urls

  # insert data into the table: "urls"
  insert_urls(
    # the rows to be inserted
    objects: [urls_insert_input!]!

    # on conflict condition
    on_conflict: urls_on_conflict
  ): urls_mutation_response

  # insert a single row into the table: "urls"
  insert_urls_one(
    # the row to be inserted
    object: urls_insert_input!

    # on conflict condition
    on_conflict: urls_on_conflict
  ): urls

  # update data of the table: "urls"
  update_urls(
    # increments the integer columns with given value of the filtered values
    _inc: urls_inc_input

    # sets the columns of the filtered rows to the given values
    _set: urls_set_input

    # filter the rows which have to be updated
    where: urls_bool_exp!
  ): urls_mutation_response

  # update single row of the table: "urls"
  update_urls_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: urls_inc_input

    # sets the columns of the filtered rows to the given values
    _set: urls_set_input
    pk_columns: urls_pk_columns_input!
  ): urls
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# query root
type query_root {
  # fetch data from the table: "urls"
  urls(
    # distinct select on columns
    distinct_on: [urls_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [urls_order_by!]

    # filter the rows returned
    where: urls_bool_exp
  ): [urls!]!

  # fetch aggregated fields from the table: "urls"
  urls_aggregate(
    # distinct select on columns
    distinct_on: [urls_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [urls_order_by!]

    # filter the rows returned
    where: urls_bool_exp
  ): urls_aggregate!

  # fetch data from the table: "urls" using primary key columns
  urls_by_pk(id: bigint!): urls
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "urls"
  urls(
    # distinct select on columns
    distinct_on: [urls_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [urls_order_by!]

    # filter the rows returned
    where: urls_bool_exp
  ): [urls!]!

  # fetch aggregated fields from the table: "urls"
  urls_aggregate(
    # distinct select on columns
    distinct_on: [urls_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [urls_order_by!]

    # filter the rows returned
    where: urls_bool_exp
  ): urls_aggregate!

  # fetch data from the table: "urls" using primary key columns
  urls_by_pk(id: bigint!): urls
}

scalar timestamptz

# expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

# each url entry
#
#
# columns and relationships of "urls"
#
type urls {
  created_at: timestamptz!
  id: bigint!
  long: String!
  short: String!
}

# aggregated selection of "urls"
type urls_aggregate {
  aggregate: urls_aggregate_fields
  nodes: [urls!]!
}

# aggregate fields of "urls"
type urls_aggregate_fields {
  avg: urls_avg_fields
  count(columns: [urls_select_column!], distinct: Boolean): Int
  max: urls_max_fields
  min: urls_min_fields
  stddev: urls_stddev_fields
  stddev_pop: urls_stddev_pop_fields
  stddev_samp: urls_stddev_samp_fields
  sum: urls_sum_fields
  var_pop: urls_var_pop_fields
  var_samp: urls_var_samp_fields
  variance: urls_variance_fields
}

# order by aggregate values of table "urls"
input urls_aggregate_order_by {
  avg: urls_avg_order_by
  count: order_by
  max: urls_max_order_by
  min: urls_min_order_by
  stddev: urls_stddev_order_by
  stddev_pop: urls_stddev_pop_order_by
  stddev_samp: urls_stddev_samp_order_by
  sum: urls_sum_order_by
  var_pop: urls_var_pop_order_by
  var_samp: urls_var_samp_order_by
  variance: urls_variance_order_by
}

# input type for inserting array relation for remote table "urls"
input urls_arr_rel_insert_input {
  data: [urls_insert_input!]!
  on_conflict: urls_on_conflict
}

# aggregate avg on columns
type urls_avg_fields {
  id: Float
}

# order by avg() on columns of table "urls"
input urls_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "urls". All fields are combined with a logical 'AND'.
input urls_bool_exp {
  _and: [urls_bool_exp]
  _not: urls_bool_exp
  _or: [urls_bool_exp]
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  long: String_comparison_exp
  short: String_comparison_exp
}

# unique or primary key constraints on table "urls"
enum urls_constraint {
  # unique or primary key constraint
  urls_pkey

  # unique or primary key constraint
  urls_short_key
}

# input type for incrementing integer column in table "urls"
input urls_inc_input {
  id: bigint
}

# input type for inserting data into table "urls"
input urls_insert_input {
  created_at: timestamptz
  id: bigint
  long: String
  short: String
}

# aggregate max on columns
type urls_max_fields {
  created_at: timestamptz
  id: bigint
  long: String
  short: String
}

# order by max() on columns of table "urls"
input urls_max_order_by {
  created_at: order_by
  id: order_by
  long: order_by
  short: order_by
}

# aggregate min on columns
type urls_min_fields {
  created_at: timestamptz
  id: bigint
  long: String
  short: String
}

# order by min() on columns of table "urls"
input urls_min_order_by {
  created_at: order_by
  id: order_by
  long: order_by
  short: order_by
}

# response of any mutation on the table "urls"
type urls_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [urls!]!
}

# input type for inserting object relation for remote table "urls"
input urls_obj_rel_insert_input {
  data: urls_insert_input!
  on_conflict: urls_on_conflict
}

# on conflict condition type for table "urls"
input urls_on_conflict {
  constraint: urls_constraint!
  update_columns: [urls_update_column!]!
  where: urls_bool_exp
}

# ordering options when selecting data from "urls"
input urls_order_by {
  created_at: order_by
  id: order_by
  long: order_by
  short: order_by
}

# primary key columns input for table: "urls"
input urls_pk_columns_input {
  id: bigint!
}

# select columns of table "urls"
enum urls_select_column {
  # column name
  created_at

  # column name
  id

  # column name
  long

  # column name
  short
}

# input type for updating data in table "urls"
input urls_set_input {
  created_at: timestamptz
  id: bigint
  long: String
  short: String
}

# aggregate stddev on columns
type urls_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "urls"
input urls_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type urls_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "urls"
input urls_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type urls_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "urls"
input urls_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type urls_sum_fields {
  id: bigint
}

# order by sum() on columns of table "urls"
input urls_sum_order_by {
  id: order_by
}

# update columns of table "urls"
enum urls_update_column {
  # column name
  created_at

  # column name
  id

  # column name
  long

  # column name
  short
}

# aggregate var_pop on columns
type urls_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "urls"
input urls_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type urls_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "urls"
input urls_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type urls_variance_fields {
  id: Float
}

# order by variance() on columns of table "urls"
input urls_variance_order_by {
  id: order_by
}

query get_urls($limit: Int = 5) {
  urls(limit: $limit) {
    id
    short
    long
  }
}

mutation create_url($long: String!, $short: String!) {
  insert_urls_one(object: {long: $long, short: $short}) {
    short
  }
}

mutation delete_url($short: String_comparison_exp = {}) {
  delete_urls(where: {short: $short}) {
    returning {
      id
    }
  }
}
